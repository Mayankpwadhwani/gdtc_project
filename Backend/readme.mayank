# from fastapi import FastAPI, HTTPException, Depends
# from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
# from pydantic import BaseModel
# from passlib.context import CryptContext
# from jose import JWTError, jwt
# from pymongo import MongoClient
# import datetime

# # Security settings
# SECRET_KEY = "your_secret_key"
# ALGORITHM = "HS256"
# ACCESS_TOKEN_EXPIRE_MINUTES = 30

# # Password hashing
# pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# # OAuth2 scheme
# oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# # Pydantic models
# class User(BaseModel):
#     username: str
#     password: str

# class Token(BaseModel):
#     access_token: str
#     token_type: str

# # Utility functions
# def check_password(plain_password, hashed_password):
#     return pwd_context.verify(plain_password, hashed_password)

# def hash_password(password):
#     return pwd_context.hash(password)

# def generate_access_token(data: dict, expires_delta: datetime.timedelta = None):
#     to_encode = data.copy()
#     expire = datetime.datetime.utcnow() + (expires_delta or datetime.timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
#     to_encode.update({"exp": expire})
#     return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

# def fetch_user(username: str):
#     return users_collection.find_one({"username": username})

# def get_authenticated_user(username: str, password: str):
#     user = fetch_user(username)
#     if not user or not check_password(password, user["password"]):
#         return False
#     return user

# # Routes
# @app.post("/register")
# def register_user(user: User):
#     if fetch_user(user.username):
#         raise HTTPException(status_code=400, detail="Username already registered")
#     hashed_password = hash_password(user.password)
#     users_collection.insert_one({"username": user.username, "password": hashed_password})
#     return {"msg": "User registered successfully"}

# @app.post("/token", response_model=Token)
# def login_user(form_data: OAuth2PasswordRequestForm = Depends()):
#     user = get_authenticated_user(form_data.username, form_data.password)
#     if not user:
#         raise HTTPException(status_code=401, detail="Invalid credentials")
#     access_token = generate_access_token(data={"sub": user["username"]})
#     return {"access_token": access_token, "token_type": "bearer"}

# async def get_current_user_from_token(token: str = Depends(oauth2_scheme)):
#     try:
#         payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
#         username = payload.get("sub")
#         if username is None:
#             raise HTTPException(status_code=401, detail="Invalid token")
#     except JWTError:
#         raise HTTPException(status_code=401, detail="Invalid token")
#     user = fetch_user(username)
#     if user is None:
#         raise HTTPException(status_code=401, detail="User not found")
#     return user

# @app.get("/trains")
# def get_trains(current_user: dict = Depends(get_current_user_from_token)):
#     return {"trains": ["Train A", "Train B", "Train C"]}

# @app.get("/buses")
# def get_buses(current_user: dict = Depends(get_current_user_from_token)):
#     return {"buses": ["Bus X", "Bus Y", "Bus Z"]}
